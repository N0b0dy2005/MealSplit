# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Upload

type User {
    id: Int!
    name: String!
    email: String!
    debts: String!
    credits: String!
    createDate: String!
    updatedDate: String!
    phoneNumber: String!
}
type Meal {
    id : Int!
    name: String!
    date: String!
    totalAmount: String!
    userId: Int!
    description: String!
    createDate: String!
    updatedDate: String!
    userIds: String!
}


type response {
    status: String!
    message: String!
    success: Boolean!
}


input MealInput {
    name: String!
    date: String!
    userId: Int!
    totalAmount: String!
    userIds: String!
    description: String!
}
input PaymentInput {
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    description: String!
}
type Payment {
    id: Int!
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    description: String!
    date: String!

}
type Debt {
    id: Int!
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    mealsCount: Int!
    createDate: String!
    updatedDate: String!
}
type Activities {
    id: Int!
    type: String!
    description: String!
    fromUserId: Int!
    toUserId: Int!
    userId: Int!
    amount: String!
    date: String!
}
type ReceiptItem {
    name: String!
    price: Float!
}

type ReceiptResult {
    items: [ReceiptItem!]!
    total: Float!
}


type TotalCreditsPerUser {
    userId: Int!
    amount: String!
}

type TobDebtsPerUser {
    userId: Int!
    amount: String!
}
type Dashboard {
    totalUsers: Int!
    totalMeals: Int!
    totalDebts: String!
    totalCredits: String!
    tobDebtsPerUser: [TobDebtsPerUser!]!
    totalCreditsPerUser: [TotalCreditsPerUser!]!
}
type Query {
    getUsers: [User!]!
    getMeals: [Meal!]!
    getPayments: [Payment!]!
    getDebts: [Debt!]!
    getActivities: [Activities!]!
    getDashboard: Dashboard!
}

type Mutation {
    uploadReceipt(file: Upload!): ReceiptResult!
    createPost(content: String!): response!
    createUser(name: String!, email: String!): response!
    createMeal(meal: MealInput!): response!
    createPayment(payment: PaymentInput!): response!
}

