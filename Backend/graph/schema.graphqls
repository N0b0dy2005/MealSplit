# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Upload

type User {
    id: Int!
    name: String!
    email: String!
    debts: String!
    credits: String!
    createDate: String!
    updatedDate: String!
    phoneNumber: String!
    admin: Boolean!
}
type Meal {
    id : Int!
    name: String!
    date: String!
    totalAmount: String!
    userId: Int!
    description: String!
    createDate: String!
    updatedDate: String!
    userIds: String!
    products: String!
}

type CurrentMealsResponse {
    id: Int!
    name: String!
    totalAmount: String!
    totalMealsCount: Int!
}


type response {
    status: String!
    message: String!
    success: Boolean!
}


input MealInput {
    name: String!
    date: String!
    userId: Int!
    totalAmount: String!
    userIds: String!
    description: String!
    produkts: String!
}
input PaymentInput {
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    description: String!
}
type Payment {
    id: Int!
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    description: String!
    date: String!
    isConfirmed: Boolean!
}
type Debt {
    id: Int!
    fromUserId: Int!
    toUserId: Int!
    amount: String!
    mealsCount: Int!
    createDate: String!
    updatedDate: String!
    isConfirmed: Boolean!
    mealId: Int!
}
type Activities {
    id: Int!
    type: String!
    description: String!
    fromUserId: Int!
    toUserId: Int!
    userId: Int!
    amount: String!
    date: String!
    isConfirmed: Boolean!
}


type TotalCreditsPerUser {
    userId: Int!
    amount: String!
}
input UserInput {
    id: Int!
    name: String!
    email: String!
    admin: Boolean!
}
input UpdateUserInput {
    id: Int!
    name: String!
    email: String!
    phoneNumber: String!
    password: String!
}

type TobDebtsPerUser {
    userId: Int!
    amount: String!
}
type Dashboard {
    totalUsers: Int!
    totalMeals: Int!
    totalDebts: String!
    totalCredits: String!
    tobDebtsPerUser: [TobDebtsPerUser!]!
    totalCreditsPerUser: [TotalCreditsPerUser!]!
}
type MealInfo {
    id: Int!
    name: String!
    description: String
    date: String!
    total_amount: String!
}

# Informationen zu einer Zahlung im Kontext einer Schuld
type PaymentInfo {
    id: Int!
    description: String
    date: String!
    amount: String!
}

# Erweiterter DebtDetail-Type f√ºr detaillierte Schuldenansicht
type DebtDetail {
    id: Int!
    from_user_id: Int!
    to_user_id: Int!
    from_user_name: String!
    to_user_name: String!
    amount: String!
    meals_count: Int!
    create_date: String!
    is_confirmed: Boolean!
    type: String!  # "meal" oder "payment"
    meal_id: Int
    payment_id: Int
    meal_info: MealInfo
    payment_info: PaymentInfo
}
type Query {
    getUsers: [User!]!
    getMeals: [Meal!]!
    getPayments: [Payment!]!
    getDebts: [Debt!]!
    getActivities: [Activities!]!
    getDashboard: Dashboard!
    getCurrentUser: User!
    getMealById(id: Int!): Meal!
    getMealsForCurrentUser: [Meal!]!
    getDebtDetails(fromUserId: Int!, toUserId: Int!): [DebtDetail!]!
}



type Mutation {
    editUser(user: UserInput!): response!
    deleteUser(id: Int!): response!
    createPost(content: String!): response!
    createUser(name: String!, email: String!): response!
    createMeal(meal: MealInput!): response!
    createPayment(payment: PaymentInput!): response!
    logout: response!
    updateUser(user: UpdateUserInput!): response!
}

